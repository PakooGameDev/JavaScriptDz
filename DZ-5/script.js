// Complete exercise
// NORMAL level
// Disclaimer

// –í–∞–∂–Ω–æ: —Ü–∏–∫–ª—ã for, for in, for of –ø–æ–¥ –∑–∞–ø—Ä–µ—Ç–æ–º! –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç –∑–∞–¥–∞—á–∏, –≥–¥–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —è–≤–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ —É—Å–ª–æ–≤–∏—é.
// Task 1 üñ•

// –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª–∏–Ω—É –º–∞—Å—Å–∏–≤–∞.

const colors = ['red', 'green', 'blue']
console.log(colors.length)

// Task 2 üñ•

// –î–∞–Ω –º–∞—Å—Å–∏–≤:

const animals = ['monkey', 'dog', 'cat']

// –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ –¥–ª–∏–Ω–Ω—ã.

console.log(animals[animals.length-1])

// Task 3 üñ•

// –£–¥–∞–ª–∏—Ç–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –º–∞—Å—Å–∏–≤–µ numbers = [5, 43, 63, 23, 90] –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏ - —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –º–∞—Å—Å–∏–≤–∞ –∏ —á–µ—Ä–µ–∑ —Å–≤–æ–π—Å—Ç–≤–æ, –≤—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. 


const numbers = [5, 43, 63, 23, 90];

numbers.length = 0;

// numbers = [];                     // –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑-–∑–∞ const

// numbers.splice(0,numbers.length)

// while(numbers.length > 0){
//     numbers.pop();
// };


console.log(numbers.length);


// Task 4 üñ•

// –î–∞–Ω –º–∞—Å—Å–∏–≤:

    const students = ['Polina', 'Dasha', 'Masha']

// –ò—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥—ã –º–∞—Å—Å–∏–≤–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ:

//     –£–¥–∞–ª–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞, –∑–∞—Ç–µ–º –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –¥–æ–±–∞–≤—å—Ç–µ –≤ –º–∞—Å—Å–∏–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞ Borya.
students[students.length - 1] = 'Borya' // –ª–∞–π—Ñ—Ö–∞–∫
students.pop();
students.push('Borya')

//     –£–¥–∞–ª–∏—Ç–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞, –∑–∞—Ç–µ–º –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –¥–æ–±–∞–≤—å—Ç–µ –≤ –º–∞—Å—Å–∏–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞ Andrey.
students.shift();
students.unshift('Borya')

console.log(students)

//     –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.

// Task 5 üñ•

// –î–∞–Ω –º–∞—Å—Å–∏–≤:

    const cats = ['Gachito', 'Tom', 'Batman']

// –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞. –°–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ —Ü–∏–∫–ª for, –∑–∞—Ç–µ–º for of, –∞ –∑–∞—Ç–µ–º —á–µ—Ä–µ–∑ forEach()

for (let i = 0; i < cats.length; i++) {
    console.log(cats[i])
}

for (const cat of cats) {
    console.log(cat)
}

cats.forEach(cat =>  console.log(cat))

// Task 6 üñ•

    const evenNumbers = [2, 4, 6, 8, 10]
    const oddNumbers = [1, 3, 5, 7, 9]

//     –°–æ–µ–¥–∏–Ω–∏—Ç–µ –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª –≤ –æ–¥–∏–Ω.
//     –°–æ–µ–¥–∏–Ω–∏—Ç–µ –º–∞—Å—Å–∏–≤ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏ - —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –∏ —á–µ—Ä–µ–∑ spread

const allNums = evenNumbers.concat(oddNumbers);
const allNumsSpread = [...evenNumbers, ...oddNumbers];


console.log(allNumsSpread)

//     –í –ø–æ–ª—É—á–µ–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å —á–∏—Å–ª–∞ 8

console.log(allNumsSpread.findIndex((num => num === 8)))   // O(n), —Å—É–¥—è –ø–æ –≤—Å–µ–º—É

// –∫–∞—Å—Ç–æ–º–Ω—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫

function binarySearch(sortedArray, key){
    let firstPos = 0;
    let endPos = sortedArray.length - 1;

    while (firstPos <= endPos) {
        let middle = Math.floor((firstPos + endPos) / 2); // –Ω–∞—Ö–æ–¥–∏–º –∫–ª—é—á–µ–≤—É—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ—á–∫—É –≤ –º–∞—Å—Å–∏–≤–µ, –∞ –∏–º–µ–Ω–Ω–æ - —Å–µ—Ä–µ–¥–∏–Ω—É

        if (sortedArray[middle] === key) {    // –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ–≤–ø–∞–ª–∞ —Å –∏—Å–∫–æ–º—ã–º - –≤—ã–≤–æ–¥–∏–º
            return middle;
        } else if (sortedArray[middle] < key) {   // –∞ –¥–∞–ª—å—à–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–±–æ –ª–µ–≤—É—é, –ª–∏–±–æ –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –ø–æ —Ç–æ–º—É –∂–µ –ø—Ä–∏–Ω—Ü–∏–ø—É
            firstPos = middle + 1; 
        } else {
            endPos = middle - 1;
        }
    }
    // –∞ —Ç—É—Ç –ø–µ—á–∞–ª—å–∫–∞ - –∏—Å–∫–æ–º–æ–≥–æ –ø–æ–ø—Ä–æ—Å—Ç—É –Ω–µ—Ç
    return -1;
}

let sortedArray = allNumsSpread.sort((a, b) => a > b)

console.log(sortedArray)

console.log(binarySearch(sortedArray, 8)); // O(log n), —á—Ç–æ –≥–æ—Ä–∞–∑–¥–æ –ª—É—á—à–µ, –µ—Å–ª–∏ –∏—Å–∫–æ–º–æ–µ –Ω–µ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ —Å–ø–∏—Å–∫–∞, –∞ –º–∞—Å—Å–∏–≤ –±–æ–ª—å—à–æ–π

// Task 7 üñ•

// –î–∞–Ω –º–∞—Å—Å–∏–≤:

// –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ –¥–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –≤ —Å—Ç—Ä–æ–∫—É.

//     [0, 0, 0, 0] -> '0101010'


const binary = [0, 0, 0, 0]

const str = binary.join('1')

console.log(str)


// Task 8 üñ•

// –ï—Å—Ç—å –º–∞—Å—Å–∏–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π:

const profiles = [
  {
    name: 'John',
    data: {
      friends: {
        count: 25,
        list: []
      },
    }
  },
  {
    name: 'Mariam',
    data: {
      friends: {
        count: 1,
        list: []
      },
    }
  },
  {
    name: 'Boris',
    data: {
      friends: {
        count: 5,
        list: []
      }
    },
    blocked: true,
  },
  
  {
    name: 'Alice',
    data: null,
  },
]

// –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ (data), –ø—Ä–æ—Ñ–∏–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ª–∞–π–∫–æ–≤.

let arr = profiles.filter(profile => profile.blocked === false || profile.blocked === undefined || profile.blocked === null);

arr.sort((profileA, profileB) => profileA.name < profileB.name)

console.log(arr)

// Task 9 üñ•

// –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º.

function isPalindrome(str) {
    
    let arr = str.split('');
    arr.reverse();
    let newStr = arr.join('');
    
    return newStr === str;
}

console.log(isPalindrome('—Ç–æ–ø–æ—Ç'))


// Task 10 üñ•

//     –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–µ–ª –≤ –º–Ω–æ–≥–æ–º–µ—Ä–Ω–æ–º –º–∞—Å—Å–∏–≤–µ.

const matrix = [
    [12, 98, 78, 65, 23],
    [54, 76, 98, 43, 65],
    [13, 324, 65, 312],
    [9092, 22, 45, 90000],
]

function findAverage(matrix) {
    const newArr = matrix.reduce((acc, elem) => [...acc, ...elem])
    const arrLength = newArr.length
    return newArr.reduce((acc,elem) => acc + elem) / arrLength   // –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–µ–µ... –º–æ–∂–µ—Ç –±—ã—Ç—å —Å –¥–≤—É–º—è —Ü–∏–∫–ª–∞–º–∏ for, –∞ –º–æ–∂–µ—Ç —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –∞ –ø–æ—Ç–æ–º –∏—Ö —Å—É–º–º—É —É–∂–µ —Ä–∞–∑–¥–µ–ª–∏—Ç—å...
}

console.log(findAverage(matrix));


// Task 11 üñ•

// –î–∞–Ω –º–∞—Å—Å–∏–≤:

   const mixedNumbers = [-14, 24, -89, 43, 0 , -1, 412, 4];

// –ó–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥, —Å–æ–∑–¥–∞–π—Ç–µ –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞. 
// –í –æ–¥–∏–Ω –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤—Å–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –≤–∫–ª—é—á–∞—è 0, –≤ –¥—Ä—É–≥–æ–π –≤—Å–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ. 
// –û–±–∞ –º–∞—Å—Å–∏–≤–∞ –∑–∞—Ç–µ–º –≤—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å. 
// –û–∂–∏–¥–∞–µ—Ç—Å—è —Ä–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ reduce().


// –æ–∂–∏–¥–∞–ª—Å—è, –∫–æ–Ω–µ—á–Ω–æ, —Ä–µ–¥—É—Å...–Ω–æ —ç—Ç–æ –ø—Ä–∏—à–ª–æ –≤ –≥–æ–ª–æ–≤—É —Å—Ö–æ–¥—É
function getSplitMapped(arr = []) {
    let arrNegative = [];
    let arrPositive = [];
    arr.map((elem) => elem >= 0 ? arrNegative.push(elem) : arrPositive.push(elem)) 

    return [arrNegative, arrPositive]
}

// –¥–æ–ø–µ—Ä —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ –∑–∞–±—ã–ª –ø—Ä–æ —Ç–æ, —á—Ç–æ reduce –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤, –∫–æ—Ç–æ—Ä—ã–π –∏ –º–æ–∂–Ω–æ –≤ –¥–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞–ø–∏—Ö–∞—Ç—å
function getSplitReduced(arr = []) {
    return arr.reduce((acc, elem) => {
        elem >= 0 ? acc[0].push(elem) : acc[1].push(elem); 
        return acc;
    },  [[], []]);
}

   const [positive, negative] = getSplitReduced(mixedNumbers); 

   console.log(positive); // [24, 43, 0, 412, 4]
   console.log(negative); // [-14, -89, -1]

// Task 12 üñ•

// –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é fromKebabToCamelCase(val):

// fromKebabToCamelCase("kebab-case") == 'kebabCase';
// fromKebabToCamelCase("-webkit-appearance") == 'WebkitAppearance';
// fromKebabToCamelCase("use-style-decorator") == 'useStyleDecorator';


function fromKebabToCamelCase(val) {
    const words = val.split('-');
    return words[0] + words.slice(1).map(word => word.charAt(0).toUpperCase() + word.slice(1)).join('');
}

console.log(fromKebabToCamelCase("-webkit-appearance"));
